https://leetcode.com/problems/valid-square/description/

class Solution {
    int getLength(vector<int>&a,vector<int>&b){
        return (a[0]-b[0])*(a[0]-b[0]) + (a[1]-b[1])*(a[1]-b[1]) ; //Calculate distance 
    }
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        //Logic , For a square there should be four equal sides and two diagonals which are equal
        if(p1==p2 or p1==p3 or p1==p4)return false;
        vector<int>sides={
            getLength(p1,p2),
            getLength(p1,p3),
            getLength(p1,p4),
            getLength(p3,p2),
            getLength(p4,p2),
            getLength(p3,p4)
        };

        unordered_map<int,int>m;
        for(auto &s:sides){
            if(!m.count(s))m.insert({s,1});
            else m[s]++;
        }
        if(m.size()!=2)return false;
        for(auto &p:m) return (p.second==4) || (p.second==2);
        return false;
    }
};
