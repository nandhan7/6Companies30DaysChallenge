https://leetcode.com/problems/all-elements-in-two-binary-search-trees/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int>ans;
public:
    void merge(vector<int>tree1,vector<int>tree2){
        int i=0,j=0;
        while(i<tree1.size() and j<tree2.size()){
            if(tree1[i]>tree2[j]){
                ans.push_back(tree2[j]);
                j++;
            }else if(tree1[i]<tree2[j]){
                ans.push_back(tree1[i]);
                i++;
            }else{
                ans.push_back(tree1[i]);
                ans.push_back(tree2[j]);
                i++;
                j++;
            }
        }

        while(i<tree1.size()){
            ans.push_back(tree1[i]);
            i++;
        }

        while(j<tree2.size()){
            ans.push_back(tree2[j]);
            j++;
        }


    }
void f(TreeNode* root1,vector<int>&tree1){
    if(root1==NULL)return;
    f(root1->left,tree1);
    tree1.push_back(root1->val);
    f(root1->right,tree1);
}
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        //We find the inorder of both the trees and merge them both .
        vector<int>tree1,tree2;
        f(root1,tree1);
        f(root2,tree2);
 
        merge(tree1,tree2);
        return ans;
    }
};
